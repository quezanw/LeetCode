// time complexity: N Log N

function mergeSort(arr) {
  if(arr.length > 1) {
    let mid = Math.floor(arr.length/2)
    let L = mergeSort(slice(arr, 0, mid));
    let R = mergeSort(slice(arr, mid, arr.length));
    return merge(L, R);
  }
  return arr;
};

function merge(left, right) {
  let arr = [], i = 0, j= 0;
  while(i < left.length && j < right.length) {
    if(left[i] < right[j]) {
      arr.push(left[i]);
      i++;
    } else {
      arr.push(right[j]);
      j++;
    }
  }
  while(i < left.length) {
    arr.push(left[i]);
    i++;
  }
  while(j < right.length) {
    arr.push(right[j]);
    j++;
  }
  return arr;
}

function slice(arr, start, end) {
  let result = [];
  for(let i = start; i < end; i++) {
    result.push(arr[i]);
  }
  return result;
}


let arr = [37, 10, 2, 17, 5];
let zero = [0]
let empty = []
let arr2 = [10,9,8,7,6,5,4,3,2,1]
let arr3 = [3,4]
console.log(mergeSort(arr));
console.log(mergeSort(zero));
console.log(mergeSort(empty));
console.log(mergeSort(arr2));
console.log(mergeSort(arr3));

